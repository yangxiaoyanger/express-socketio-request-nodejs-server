{"version":3,"sources":["../../src/pages/parklive/parklive.module.ts","../../src/pages/parklive/parklive.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAyC;AACO;AACN;AAC4B;AActE;IAAA;IAAiC,CAAC;IAArB,kBAAkB;QAZ9B,uEAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,+DAAY;aACb;YACD,OAAO,EAAE;gBACP,uFAAgB;gBAChB,sEAAe,CAAC,QAAQ,CAAC,+DAAY,CAAC;aACvC;YACD,OAAO,EAAE;gBACP,+DAAY;aACb;SACF,CAAC;OACW,kBAAkB,CAAG;IAAD,yBAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;;ACjBmB;AACO;AAEmB;AAEjB;AAG3D;;;;;GAKG;AAOH;IAGE,sBAAmB,OAAsB,EAChC,SAAoB,EACpB,MAAqB,EACpB,WAAwB;QAHlC,iBAcC;QAdkB,YAAO,GAAP,OAAO,CAAe;QAChC,cAAS,GAAT,SAAS,CAAW;QACpB,WAAM,GAAN,MAAM,CAAe;QACpB,gBAAW,GAAX,WAAW,CAAa;QAC9B,IAAI,CAAC,IAAI,GAAG,IAAI,6DAAM,CAAC,EAAC,oBAAoB,EAAE,KAAK,EAAC,CAAC,CAAC;QACtD,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;QACzB,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,eAAK;YACvC,OAAO,CAAC,GAAG,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;YACvD,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,KAAK,SAAS,CAAC,EAAC;gBAChC,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC;oBACZ,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC;gBAC5B,CAAC,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC,CAAC,kBAAkB;IAC1B,CAAC;IAED,qCAAc,GAAd;QACE,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;IAE7C,CAAC;IAED,oCAAa,GAAb,UAAc,GAAW;QACvB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACR,IAAI,WAAW,GAAgB;gBAC7B,EAAE,EAAE,WAAW;gBACf,IAAI,EAAE,QAAQ;gBACd,OAAO,EAAE,GAAG;aACb,CAAC;YACF,MAAM,CAAC,WAAW,CAAC;QACrB,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED,2BAAI,GAAJ,UAAK,OAAO;QACV,IAAI,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QACzC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,wCAAwC;YACxC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAChC,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QACpC,CAAC;IACH,CAAC;IAED,+BAAQ,GAAR;QACE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC,SAAS,CACjD,aAAG;YACD,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACnB,CAAC,CACF;IACH,CAAC;IAnDU,YAAY;QAJxB,wEAAS,CAAC;YACT,QAAQ,EAAE,eAAe;WACG;SAC7B,CAAC;6EAIyC;YACrB,+FAAS;YACZ,8EAAa;YACP,SAAW;OANvB,YAAY,CAoDxB;IAAD,CAAC;AAAA;SApDY,YAAY,e","file":"1.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { ParklivePage } from './parklive';\nimport { ComponentsModule } from '../../components/components.module';\n\n@NgModule({\n  declarations: [\n    ParklivePage,\n  ],\n  imports: [\n    ComponentsModule,\n    IonicPageModule.forChild(ParklivePage),\n  ],\n  exports: [\n    ParklivePage\n  ]\n})\nexport class ParklivePageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/parklive/parklive.module.ts","import { Component, NgZone } from '@angular/core';\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\nimport * as io from 'socket.io-client';\nimport {SocketService} from '../../providers/socket-service/socket-service';\nimport {ChatMessage} from '../../models/chat-message';\nimport { HttpService } from '../../providers/http-service';\n\n\n/**\n * Generated class for the ParklivePage page.\n *\n * See https://ionicframework.com/docs/components/#navigation for more info on\n * Ionic pages and navigation.\n */\n\n@IonicPage({\n  segment: 'parklive'\n})\n@Component({\n  selector: 'page-parklive',\n  templateUrl: 'parklive.html',\n})\nexport class ParklivePage {\n  socketHost: string;\n  zone: NgZone;\n  constructor(public navCtrl: NavController, \n    public navParams: NavParams, \n    public socket: SocketService,\n    private httpService: HttpService) {\n      this.zone = new NgZone({enableLongStackTrace: false});\n      this.socket.initialize();\n      this.socket.socketService.subscribe(event => {\n        console.log('message received from server... ', event);\n        if (event.category === 'message'){\n          this.zone.run(() => {\n            console.log(event.message)\n          });\n        }\n      }); //end of subscribe\n  }\n\n  ionViewDidLoad() {\n    console.log('ionViewDidLoad ParklivePage');\n\n  }\n\n  formatMessage(msg: string) {\n    if (msg) {\n      let chatMessage: ChatMessage = {\n        to: 'recipient',\n        from: 'sender',\n        message: msg,\n      };\n      return chatMessage;\n    }\n    return null;\n  }\n\n  send(message) {\n    let newMsg = this.formatMessage(message);\n    if (newMsg) {\n      // let newMsg = this.formatMessage(msg);\n      this.socket.sendMessage(newMsg);\n      console.log('emitting: ', newMsg);\n    }\n  }\n\n  sendHttp() {\n    this.httpService.get('/test/getUserInfo').subscribe(\n      res => {\n        console.log(res);\n      }\n    )\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/parklive/parklive.ts"],"sourceRoot":""}